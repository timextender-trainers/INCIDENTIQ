version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: incidentiq-sqlserver
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: IncidentIQ123!
      MSSQL_PID: Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - incidentiq-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P IncidentIQ123! -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  # Redis Cache for Session Management and AI Memory
  redis:
    image: redis:7-alpine
    container_name: incidentiq-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - incidentiq-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # IncidentIQ Web Application
  web:
    build:
      context: .
      dockerfile: src/IncidentIQ.Web/Dockerfile
    container_name: incidentiq-web
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=IncidentIQDb;User Id=sa;Password=IncidentIQ123!;TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - OpenAI__ApiKey=${OPENAI_API_KEY}
      - AzureOpenAI__ApiKey=${AZURE_OPENAI_API_KEY}
      - AzureOpenAI__Endpoint=${AZURE_OPENAI_ENDPOINT}
    networks:
      - incidentiq-network
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local

networks:
  incidentiq-network:
    driver: bridge