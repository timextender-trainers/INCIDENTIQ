// <auto-generated />
using System;
using IncidentIQ.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IncidentIQ.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250812082235_AddCompletedOnboardingToApplicationUser")]
    partial class AddCompletedOnboardingToApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IncidentIQ.Domain.Entities.AgentInteraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AgentType")
                        .HasColumnType("int");

                    b.Property<double>("ConfidenceScore")
                        .HasColumnType("float");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputTokens")
                        .HasColumnType("int");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OutputTokens")
                        .HasColumnType("int");

                    b.Property<int>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.Property<Guid?>("TrainingScenarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TrainingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TrainingScenarioId");

                    b.HasIndex("TrainingSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("AgentInteractions");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.BehavioralAnalytics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformanceHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BehavioralAnalytics");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.TrainingScenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("TargetRole")
                        .HasColumnType("int");

                    b.Property<int>("TargetSecurityLevel")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TrainingScenarios");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.TrainingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoachingInteractions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int");

                    b.Property<string>("Responses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainingScenarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainingScenarioId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("SecurityLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("IncidentIQ.Infrastructure.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("IncidentIQ.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CompletedOnboarding")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.AgentInteraction", b =>
                {
                    b.HasOne("IncidentIQ.Domain.Entities.TrainingScenario", "TrainingScenario")
                        .WithMany("AgentInteractions")
                        .HasForeignKey("TrainingScenarioId");

                    b.HasOne("IncidentIQ.Domain.Entities.TrainingSession", "TrainingSession")
                        .WithMany("AgentInteractions")
                        .HasForeignKey("TrainingSessionId");

                    b.HasOne("IncidentIQ.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("TrainingScenario");

                    b.Navigation("TrainingSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.BehavioralAnalytics", b =>
                {
                    b.HasOne("IncidentIQ.Domain.Entities.User", "User")
                        .WithMany("BehavioralAnalytics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("IncidentIQ.Domain.Entities.LearningBehaviorProfile", "LearningBehavior", b1 =>
                        {
                            b1.Property<Guid>("BehavioralAnalyticsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("AverageSessionDurationMinutes")
                                .HasColumnType("int");

                            b1.Property<string>("ChallengeAreas")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("EngagementLevel")
                                .HasColumnType("float");

                            b1.Property<string>("PreferredLearningStyle")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<bool>("RespondsWellToCoaching")
                                .HasColumnType("bit");

                            b1.Property<string>("StrongAreas")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BehavioralAnalyticsId");

                            b1.ToTable("BehavioralAnalytics");

                            b1.WithOwner()
                                .HasForeignKey("BehavioralAnalyticsId");
                        });

                    b.OwnsOne("IncidentIQ.Domain.Entities.RiskAssessment", "CurrentRiskProfile", b1 =>
                        {
                            b1.Property<Guid>("BehavioralAnalyticsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("ConfidenceScore")
                                .HasColumnType("float");

                            b1.Property<int>("CurrentRiskLevel")
                                .HasColumnType("int");

                            b1.Property<string>("IdentifiedVulnerabilities")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("LastAssessed")
                                .HasColumnType("datetime2");

                            b1.Property<string>("MitigationStrategies")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("BehavioralAnalyticsId");

                            b1.ToTable("BehavioralAnalytics");

                            b1.WithOwner()
                                .HasForeignKey("BehavioralAnalyticsId");
                        });

                    b.OwnsOne("IncidentIQ.Domain.Entities.SecurityCompetencyProfile", "CompetencyProfile", b1 =>
                        {
                            b1.Property<Guid>("BehavioralAnalyticsId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("ComplianceAwareness")
                                .HasColumnType("float");

                            b1.Property<double>("DataProtection")
                                .HasColumnType("float");

                            b1.Property<double>("IncidentResponse")
                                .HasColumnType("float");

                            b1.Property<DateTime>("LastAssessed")
                                .HasColumnType("datetime2");

                            b1.Property<double>("OverallSecurityAwareness")
                                .HasColumnType("float");

                            b1.Property<double>("PasswordSecurity")
                                .HasColumnType("float");

                            b1.Property<double>("PhishingRecognition")
                                .HasColumnType("float");

                            b1.Property<double>("SocialEngineeringAwareness")
                                .HasColumnType("float");

                            b1.HasKey("BehavioralAnalyticsId");

                            b1.ToTable("BehavioralAnalytics");

                            b1.WithOwner()
                                .HasForeignKey("BehavioralAnalyticsId");
                        });

                    b.Navigation("CompetencyProfile")
                        .IsRequired();

                    b.Navigation("CurrentRiskProfile")
                        .IsRequired();

                    b.Navigation("LearningBehavior")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.TrainingScenario", b =>
                {
                    b.OwnsOne("IncidentIQ.Domain.Entities.PersonalizationData", "PersonalizationContext", b1 =>
                        {
                            b1.Property<Guid>("TrainingScenarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ColleagueNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CompanyName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("CompanySpecificDetails")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RelevantSystems")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RoleSpecificContext")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TrainingScenarioId");

                            b1.ToTable("TrainingScenarios");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScenarioId");
                        });

                    b.OwnsOne("IncidentIQ.Domain.Entities.ScenarioConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<Guid>("TrainingScenarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("AllowsMultipleAttempts")
                                .HasColumnType("bit");

                            b1.Property<int>("EstimatedDurationMinutes")
                                .HasColumnType("int");

                            b1.Property<int>("MaxAttempts")
                                .HasColumnType("int");

                            b1.Property<bool>("RequiresRealTimeCoaching")
                                .HasColumnType("bit");

                            b1.Property<string>("ScoringCriteria")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TrainingScenarioId");

                            b1.ToTable("TrainingScenarios");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScenarioId");
                        });

                    b.OwnsOne("IncidentIQ.Domain.Entities.ScenarioContent", "Content", b1 =>
                        {
                            b1.Property<Guid>("TrainingScenarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Consequences")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DecisionPoints")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("InteractiveElements")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LearningObjectives")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PrimaryContent")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TrainingScenarioId");

                            b1.ToTable("TrainingScenarios");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScenarioId");
                        });

                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("PersonalizationContext")
                        .IsRequired();
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.TrainingSession", b =>
                {
                    b.HasOne("IncidentIQ.Domain.Entities.TrainingScenario", "TrainingScenario")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TrainingScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IncidentIQ.Domain.Entities.User", "User")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("IncidentIQ.Domain.Entities.SessionScoring", "Scoring", b1 =>
                        {
                            b1.Property<Guid>("TrainingSessionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CategoryScores")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("CorrectResponses")
                                .HasColumnType("int");

                            b1.Property<string>("FeedbackSummary")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.Property<string>("ImprovementAreas")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("OverallScore")
                                .HasColumnType("float");

                            b1.Property<string>("StrengthAreas")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("TotalResponses")
                                .HasColumnType("int");

                            b1.HasKey("TrainingSessionId");

                            b1.ToTable("TrainingSessions");

                            b1.WithOwner()
                                .HasForeignKey("TrainingSessionId");
                        });

                    b.Navigation("Scoring")
                        .IsRequired();

                    b.Navigation("TrainingScenario");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.User", b =>
                {
                    b.OwnsOne("IncidentIQ.Domain.Entities.SecurityProfile", "SecurityProfile", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ColleagueNames")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CompanyContext")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LearningPreferences")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RecentProjects")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ToolsAndSystems")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("VulnerabilityPatterns")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("AppUsers");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("SecurityProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("IncidentIQ.Infrastructure.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IncidentIQ.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IncidentIQ.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("IncidentIQ.Infrastructure.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IncidentIQ.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IncidentIQ.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.TrainingScenario", b =>
                {
                    b.Navigation("AgentInteractions");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.TrainingSession", b =>
                {
                    b.Navigation("AgentInteractions");
                });

            modelBuilder.Entity("IncidentIQ.Domain.Entities.User", b =>
                {
                    b.Navigation("BehavioralAnalytics");

                    b.Navigation("TrainingSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
