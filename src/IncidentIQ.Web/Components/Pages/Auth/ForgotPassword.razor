@page "/forgot-password"
@using Microsoft.AspNetCore.Identity
@using IncidentIQ.Infrastructure.Data
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<ForgotPassword> Logger

<PageTitle>Reset Password - IncidentIQ</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-logo">
            <img src="/images/incidentiq-logo.png" alt="IncidentIQ" class="auth-logo-image" />
        </div>
        <div class="auth-header">
            <h1 class="auth-title">Reset Your Password</h1>
            <p class="auth-subtitle">Enter your email address and we'll send you instructions to reset your password</p>
        </div>

        @if (!emailSent)
        {
            <EditForm Model="forgotPasswordModel" OnValidSubmit="HandleForgotPassword" class="auth-form">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-error">
                        <i class="bi bi-exclamation-triangle"></i>
                        @errorMessage
                    </div>
                }

                <div class="form-group">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText id="email" type="email" class="form-input" @bind-Value="forgotPasswordModel.Email" placeholder="Enter your email address" />
                    <ValidationMessage For="() => forgotPasswordModel.Email" class="validation-message" />
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <i class="bi bi-arrow-clockwise spin"></i>
                            <span>Sending Reset Instructions...</span>
                        }
                        else
                        {
                            <i class="bi bi-envelope"></i>
                            <span>Send Reset Instructions</span>
                        }
                    </button>
                </div>
            </EditForm>
        }
        else
        {
            <div class="success-message">
                <div class="success-icon">
                    <i class="bi bi-check-circle-fill"></i>
                </div>
                <h3 class="success-title">Check Your Email</h3>
                <p class="success-description">
                    We've sent password reset instructions to <strong>@forgotPasswordModel.Email</strong>
                </p>
                <p class="success-note">
                    If you don't see the email in your inbox, please check your spam folder. 
                    The reset link will expire in 24 hours for security reasons.
                </p>
                <div class="success-actions">
                    <button class="btn btn-secondary" @onclick="ResetForm">
                        <i class="bi bi-arrow-left"></i>
                        Try Different Email
                    </button>
                </div>
            </div>
        }

        <div class="auth-footer">
            <p>Remember your password? <a href="/login" class="auth-link">Sign in here</a></p>
            <p>Don't have an account? <a href="/register" class="auth-link">Create one now</a></p>
        </div>

        <div class="security-note">
            <div class="note-header">
                <i class="bi bi-shield-check"></i>
                <span>Security Information</span>
            </div>
            <ul class="note-list">
                <li>Password reset links expire after 24 hours</li>
                <li>We'll never ask for your password via email</li>
                <li>Only use reset links from official IncidentIQ emails</li>
            </ul>
        </div>
    </div>
</div>

<style>
.auth-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, var(--color-primary-50) 0%, var(--color-surface) 100%);
    padding: var(--spacing-6);
}

.auth-card {
    background: var(--color-surface);
    border-radius: var(--border-radius-xl);
    box-shadow: var(--shadow-xl);
    padding: var(--spacing-8);
    width: 100%;
    max-width: 480px;
    border: 1px solid var(--color-border);
}

.auth-logo {
    text-align: center;
    margin-bottom: var(--spacing-6);
}

.auth-logo-image {
    max-width: 200px;
    height: auto;
    display: inline-block;
}

.auth-header {
    text-align: center;
    margin-bottom: var(--spacing-8);
}

.auth-title {
    font-size: 2rem;
    font-weight: var(--font-weight-bold);
    color: var(--color-text-primary);
    margin-bottom: var(--spacing-2);
}

.auth-subtitle {
    color: var(--color-text-secondary);
    font-size: var(--font-size-base);
    margin: 0;
    line-height: 1.5;
}

.auth-form {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-4);
    margin-bottom: var(--spacing-6);
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
}

.form-label {
    font-weight: var(--font-weight-medium);
    color: var(--color-text-primary);
    font-size: var(--font-size-sm);
}

.form-input {
    padding: var(--spacing-3);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-base);
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.form-input:focus {
    outline: none;
    border-color: var(--color-primary-500);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-actions {
    margin-top: var(--spacing-4);
}

.btn-lg {
    padding: var(--spacing-4) var(--spacing-6);
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-semibold);
    border-radius: var(--border-radius-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-2);
    width: 100%;
    transition: all 0.3s ease;
}

.btn-lg:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.success-message {
    text-align: center;
    margin-bottom: var(--spacing-6);
}

.success-icon {
    color: var(--color-success-600);
    font-size: 3rem;
    margin-bottom: var(--spacing-4);
}

.success-title {
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-semibold);
    color: var(--color-text-primary);
    margin-bottom: var(--spacing-3);
}

.success-description {
    color: var(--color-text-secondary);
    font-size: var(--font-size-base);
    margin-bottom: var(--spacing-4);
    line-height: 1.5;
}

.success-note {
    color: var(--color-text-tertiary);
    font-size: var(--font-size-sm);
    margin-bottom: var(--spacing-6);
    line-height: 1.5;
}

.success-actions {
    display: flex;
    justify-content: center;
}

.auth-footer {
    text-align: center;
    margin-bottom: var(--spacing-6);
    padding-top: var(--spacing-4);
    border-top: 1px solid var(--color-border);
}

.auth-footer p {
    margin-bottom: var(--spacing-2);
    color: var(--color-text-secondary);
    font-size: var(--font-size-sm);
}

.auth-link {
    color: var(--color-primary-600);
    text-decoration: none;
    font-weight: var(--font-weight-medium);
}

.auth-link:hover {
    text-decoration: underline;
}

.security-note {
    background-color: var(--color-primary-50);
    border: 1px solid var(--color-primary-200);
    border-radius: var(--border-radius-lg);
    padding: var(--spacing-4);
}

.note-header {
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    font-weight: var(--font-weight-semibold);
    color: var(--color-primary-700);
    margin-bottom: var(--spacing-3);
    font-size: var(--font-size-sm);
}

.note-list {
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: var(--font-size-xs);
    color: var(--color-primary-600);
}

.note-list li {
    margin-bottom: var(--spacing-1);
    padding-left: var(--spacing-4);
    position: relative;
}

.note-list li::before {
    content: 'â€¢';
    color: var(--color-primary-500);
    position: absolute;
    left: 0;
}

.spin {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.alert {
    padding: var(--spacing-3);
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    gap: var(--spacing-2);
    font-size: var(--font-size-sm);
    margin-bottom: var(--spacing-4);
}

.alert-error {
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    color: #b91c1c;
}

.validation-summary {
    color: #b91c1c;
    background-color: #fef2f2;
    border: 1px solid #fecaca;
    padding: var(--spacing-3);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-sm);
}

.validation-message {
    color: #b91c1c;
    font-size: var(--font-size-xs);
    margin-top: var(--spacing-1);
}

@media (max-width: 768px) {
    .auth-container {
        padding: var(--spacing-4);
    }
    
    .auth-card {
        padding: var(--spacing-6);
    }
}
</style>

@code {
    private readonly ForgotPasswordModel forgotPasswordModel = new();
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;
    private bool emailSent = false;

    private async Task HandleForgotPassword()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        
        try
        {
            var user = await UserManager.FindByEmailAsync(forgotPasswordModel.Email);
            
            // Always show success message for security reasons (don't reveal if email exists)
            if (user != null)
            {
                // In a real application, you would:
                // 1. Generate a password reset token
                // 2. Send an email with the reset link
                // var token = await UserManager.GeneratePasswordResetTokenAsync(user);
                // await EmailService.SendPasswordResetEmailAsync(user.Email, token);
                
                Logger.LogInformation("Password reset requested for {Email}", forgotPasswordModel.Email);
            }
            
            // Always show success to prevent email enumeration attacks
            emailSent = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred during password reset request");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ResetForm()
    {
        emailSent = false;
        forgotPasswordModel.Email = string.Empty;
        errorMessage = string.Empty;
    }

    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;
    }
}