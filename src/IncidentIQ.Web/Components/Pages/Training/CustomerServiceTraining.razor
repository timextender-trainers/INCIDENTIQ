@page "/training/customer-service/{scenarioId:guid?}"
@rendermode InteractiveServer
@using IncidentIQ.Application.Interfaces
@using IncidentIQ.Domain.Entities
@using IncidentIQ.Domain.Enums
@using IncidentIQ.Web.Components.Training
@using Microsoft.AspNetCore.SignalR.Client
@inject IPhoneScenarioService PhoneScenarioService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<CustomerServiceTraining> Logger
@implements IAsyncDisposable

<PageTitle>The Angry Customer Breach Attempt - IncidentIQ</PageTitle>

<div class="training-container">
    <!-- Header Section -->
    <div class="training-header">
        <div class="breadcrumb">
            <a href="/training">‚Üê Back to Training</a>
        </div>
        <div class="scenario-info">
            <div class="scenario-title">
                <h1>The Angry Customer Breach Attempt</h1>
                <div class="scenario-badges">
                    <span class="badge scenario-type">Social Engineering Training</span>
                    <span class="badge status @(IsTrainingActive ? "in-progress" : "ready")">
                        @(IsTrainingActive ? "In Progress" : "Ready")
                    </span>
                    <span class="badge timer">@FormatElapsedTime()</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Training Interface -->
    <div class="training-interface">
        <!-- Left Sidebar Navigation -->
        <div class="sidebar">
            <nav class="sidebar-nav">
                <a href="/training" class="nav-item">
                    <i class="bi bi-house"></i>
                    <span>Dashboard</span>
                </a>
                <a href="/training" class="nav-item active">
                    <i class="bi bi-mortarboard"></i>
                    <span>Training</span>
                </a>
                <a href="/analytics" class="nav-item">
                    <i class="bi bi-graph-up"></i>
                    <span>Analytics</span>
                </a>
                <a href="/progress" class="nav-item">
                    <i class="bi bi-clipboard-data"></i>
                    <span>Progress</span>
                </a>
                <a href="/achievements" class="nav-item">
                    <i class="bi bi-trophy"></i>
                    <span>Achievements</span>
                </a>
                <a href="/resources" class="nav-item">
                    <i class="bi bi-book"></i>
                    <span>Resources</span>
                </a>
            </nav>

            <div class="sidebar-footer">
                <a href="/settings" class="nav-item">
                    <i class="bi bi-gear"></i>
                    <span>Settings</span>
                </a>
                <a href="/help" class="nav-item">
                    <i class="bi bi-question-circle"></i>
                    <span>Help</span>
                </a>
            </div>
        </div>

        <!-- Center: Phone Simulator -->
        <div class="phone-section">
            @if (CurrentScenario != null)
            {
                <PhoneCallSimulator 
                    CallerName="@CurrentScenario.CallerProfile.Name"
                    CallerCompany="@CurrentScenario.CallerProfile.Company"
                    CallerPhone="@CurrentScenario.CallerProfile.PhoneNumber"
                    OnCallAction="HandleCallAction"
                    OnCallStateChanged="HandleCallStateChanged"
                    OnCallDurationChanged="HandleCallDurationChanged"
                    @ref="phoneSimulator" />
            }
            else
            {
                <div class="loading-phone">
                    <div class="loading-spinner"></div>
                    <p>Loading training scenario...</p>
                </div>
            }
        </div>

        <!-- Right: Security Assessment Panel -->
        <div class="assessment-section">
            <SecurityAssessmentPanel 
                CurrentRiskLevel="CurrentRiskLevel"
                ActiveAlerts="ActiveAlerts"
                ResponseOptions="CurrentResponseOptions"
                IsCallActive="IsCallActive"
                OnResponseSelected="HandleResponseSelected"
                OnEndCall="HandleEndCall"
                OnEscalate="HandleEscalate"
                OnNeedHelp="HandleNeedHelp" />
        </div>
    </div>

    <!-- Conversation Display (shown during active call) -->
    @if (IsCallActive && ConversationHistory.Any())
    {
        <div class="conversation-overlay">
            <div class="conversation-panel">
                <div class="conversation-header">
                    <h3>Call Transcript</h3>
                    <button class="btn-close-conversation" @onclick="ToggleConversationView">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="conversation-messages">
                    @foreach (var message in ConversationHistory.OrderBy(m => m.Timestamp))
                    {
                        <div class="message @(message.IsFromUser ? "user" : "hacker")" @key="message.Id">
                            <div class="message-content">
                                <div class="message-text">@message.Text</div>
                                <div class="message-time">@message.Timestamp.ToString("HH:mm:ss")</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
.training-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    font-family: var(--font-inter);
}

.training-header {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: var(--space-4) var(--space-6);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.breadcrumb a {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    font-size: var(--text-sm);
    transition: color 0.2s ease;
}

.breadcrumb a:hover {
    color: white;
}

.scenario-info {
    margin-top: var(--space-3);
}

.scenario-title h1 {
    color: white;
    font-size: var(--text-2xl);
    font-weight: var(--font-weight-bold);
    margin-bottom: var(--space-3);
}

.scenario-badges {
    display: flex;
    gap: var(--space-2);
    flex-wrap: wrap;
}

.badge {
    padding: var(--space-1) var(--space-3);
    border-radius: var(--radius-full);
    font-size: var(--text-xs);
    font-weight: var(--font-weight-medium);
    text-transform: uppercase;
}

.badge.scenario-type {
    background: rgba(16, 185, 129, 0.2);
    color: #10b981;
    border: 1px solid rgba(16, 185, 129, 0.3);
}

.badge.status.ready {
    background: rgba(59, 130, 246, 0.2);
    color: #3b82f6;
    border: 1px solid rgba(59, 130, 246, 0.3);
}

.badge.status.in-progress {
    background: rgba(245, 158, 11, 0.2);
    color: #f59e0b;
    border: 1px solid rgba(245, 158, 11, 0.3);
}

.badge.timer {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
}

.training-interface {
    display: grid;
    grid-template-columns: 250px 1fr 400px;
    gap: var(--space-6);
    padding: var(--space-6);
    min-height: calc(100vh - 120px);
}

.sidebar {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: var(--radius-xl);
    padding: var(--space-4);
    height: fit-content;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.sidebar-nav {
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
    margin-bottom: var(--space-6);
}

.nav-item {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    padding: var(--space-3);
    border-radius: var(--radius-lg);
    color: rgba(255, 255, 255, 0.7);
    text-decoration: none;
    font-size: var(--text-sm);
    font-weight: var(--font-weight-medium);
    transition: all 0.2s ease;
}

.nav-item:hover {
    background: rgba(255, 255, 255, 0.1);
    color: white;
}

.nav-item.active {
    background: rgba(255, 255, 255, 0.2);
    color: white;
}

.nav-item i {
    font-size: var(--text-base);
    width: 18px;
}

.sidebar-footer {
    border-top: 1px solid rgba(255, 255, 255, 0.2);
    padding-top: var(--space-4);
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
}

.phone-section {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.loading-phone {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
    text-align: center;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-top: 3px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: var(--space-4);
}

.assessment-section {
    height: fit-content;
    max-height: calc(100vh - 180px);
    overflow: hidden;
}

.conversation-overlay {
    position: fixed;
    bottom: var(--space-6);
    left: 50%;
    transform: translateX(-50%);
    width: 600px;
    max-width: 90vw;
    z-index: 1000;
}

.conversation-panel {
    background: white;
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-2xl);
    max-height: 300px;
    overflow: hidden;
    border: 1px solid var(--gray-200);
}

.conversation-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-4);
    border-bottom: 1px solid var(--gray-200);
    background: var(--gray-50);
}

.conversation-header h3 {
    font-size: var(--text-lg);
    font-weight: var(--font-weight-semibold);
    color: var(--gray-900);
    margin: 0;
}

.btn-close-conversation {
    background: none;
    border: none;
    color: var(--gray-500);
    font-size: var(--text-lg);
    cursor: pointer;
    padding: var(--space-1);
    border-radius: var(--radius);
    transition: all 0.2s ease;
}

.btn-close-conversation:hover {
    background: var(--gray-200);
    color: var(--gray-700);
}

.conversation-messages {
    max-height: 240px;
    overflow-y: auto;
    padding: var(--space-4);
}

.message {
    margin-bottom: var(--space-3);
    display: flex;
}

.message.user {
    justify-content: flex-end;
}

.message.hacker {
    justify-content: flex-start;
}

.message-content {
    max-width: 70%;
    padding: var(--space-3);
    border-radius: var(--radius-lg);
}

.message.user .message-content {
    background: #3b82f6;
    color: white;
}

.message.hacker .message-content {
    background: var(--gray-100);
    color: var(--gray-900);
}

.message-text {
    font-size: var(--text-sm);
    line-height: 1.5;
    margin-bottom: var(--space-1);
}

.message-time {
    font-size: var(--text-xs);
    opacity: 0.7;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

@media (max-width: 1200px) {
    .training-interface {
        grid-template-columns: 1fr 400px;
        gap: var(--space-4);
    }
    
    .sidebar {
        display: none;
    }
}

@media (max-width: 768px) {
    .training-interface {
        grid-template-columns: 1fr;
        gap: var(--space-4);
    }
    
    .phone-section {
        order: 1;
    }
    
    .assessment-section {
        order: 2;
        max-height: none;
    }
    
    .conversation-overlay {
        position: relative;
        bottom: auto;
        left: auto;
        transform: none;
        width: 100%;
        margin-top: var(--space-4);
    }
}
</style>

@code {
    [Parameter] public Guid? ScenarioId { get; set; }

    private PhoneCallScenario? CurrentScenario { get; set; }
    private PhoneCallSession? CurrentSession { get; set; }
    private PhoneCallSimulator? phoneSimulator;
    private HubConnection? hubConnection;

    // Training state
    private bool IsTrainingActive = false;
    private bool IsCallActive = false;
    private DateTime TrainingStartTime = DateTime.UtcNow;
    private RiskLevel CurrentRiskLevel = RiskLevel.Medium;
    private List<SecurityAlert> ActiveAlerts = new();
    private List<ResponseOption> CurrentResponseOptions = new();
    private List<ConversationMessage> ConversationHistory = new();
    private bool ShowConversationView = true;

    public class ConversationMessage
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Text { get; set; } = "";
        public bool IsFromUser { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize SignalR connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/traininghub"))
                .Build();

            // Set up SignalR event handlers
            SetupSignalRHandlers();

            await hubConnection.StartAsync();

            // Load or create scenario
            if (ScenarioId.HasValue)
            {
                // Load existing scenario (future implementation)
                await LoadScenarioAsync(ScenarioId.Value);
            }
            else
            {
                // Create new scenario
                await CreateNewScenarioAsync();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing customer service training");
        }
    }

    private void SetupSignalRHandlers()
    {
        if (hubConnection == null) return;

        hubConnection.On<object>("CallStarted", (data) =>
        {
            InvokeAsync(() =>
            {
                IsTrainingActive = true;
                TrainingStartTime = DateTime.UtcNow;
                StateHasChanged();
            });
        });

        hubConnection.On<object>("CallAnswered", async (data) =>
        {
            await InvokeAsync(() =>
            {
                IsCallActive = true;
                // Parse data and update UI components
                StateHasChanged();
            });
        });

        hubConnection.On<object>("ConversationUpdate", async (data) =>
        {
            await InvokeAsync(() =>
            {
                // Update conversation history, alerts, risk level
                StateHasChanged();
            });
        });

        hubConnection.On<object>("CallEnded", async (data) =>
        {
            await InvokeAsync(() =>
            {
                IsCallActive = false;
                IsTrainingActive = false;
                StateHasChanged();
            });
        });
    }

    private async Task CreateNewScenarioAsync()
    {
        try
        {
            // Create a personalized scenario
            CurrentScenario = await PhoneScenarioService.CreateScenarioAsync(
                "demo-user-123", 
                "Customer Service Representative", 
                "TechCorp Solutions");

            // Set up initial state
            ActiveAlerts.Add(new SecurityAlert
            {
                Title = "Training Session Started",
                Description = "New customer service social engineering simulation",
                Level = RiskLevel.Low,
                Icon = "play-circle",
                TriggeredAt = DateTime.UtcNow
            });

        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating new scenario");
        }
    }

    private async Task LoadScenarioAsync(Guid scenarioId)
    {
        try
        {
            var scenarios = await PhoneScenarioService.GetScenariosForRoleAsync("Customer Service Representative");
            CurrentScenario = scenarios.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading scenario {ScenarioId}", scenarioId);
        }
    }

    private async Task HandleCallAction(string action)
    {
        try
        {
            if (hubConnection?.State == HubConnectionState.Connected)
            {
                switch (action.ToLower())
                {
                    case "answer":
                        if (CurrentSession != null)
                            await hubConnection.SendAsync("AnswerCall", CurrentSession.Id);
                        break;
                    case "decline":
                        if (CurrentSession != null)
                            await hubConnection.SendAsync("EndCall", CurrentSession.Id, "declined");
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling call action: {Action}", action);
        }
    }

    private async Task HandleCallStateChanged(string newState)
    {
        if (newState == "Active")
        {
            IsCallActive = true;
        }
        else if (newState == "Ended")
        {
            IsCallActive = false;
            IsTrainingActive = false;
        }
        
        StateHasChanged();
    }

    private void HandleCallDurationChanged(int seconds)
    {
        // Update call duration if needed
        StateHasChanged();
    }

    private async Task HandleResponseSelected(ResponseOption response)
    {
        try
        {
            if (hubConnection?.State == HubConnectionState.Connected && CurrentSession != null)
            {
                // Add user message to conversation
                ConversationHistory.Add(new ConversationMessage
                {
                    Text = response.Text,
                    IsFromUser = true,
                    Timestamp = DateTime.UtcNow
                });

                await hubConnection.SendAsync("SendUserResponse", CurrentSession.Id, response.Id, response.Text);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling response selection");
        }
    }

    private async Task HandleEndCall()
    {
        try
        {
            if (hubConnection?.State == HubConnectionState.Connected && CurrentSession != null)
            {
                await hubConnection.SendAsync("EndCall", CurrentSession.Id, "user_ended");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error ending call");
        }
    }

    private async Task HandleEscalate()
    {
        try
        {
            if (hubConnection?.State == HubConnectionState.Connected && CurrentSession != null)
            {
                await hubConnection.SendAsync("EscalateCall", CurrentSession.Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error escalating call");
        }
    }

    private async Task HandleNeedHelp()
    {
        try
        {
            if (hubConnection?.State == HubConnectionState.Connected && CurrentSession != null)
            {
                await hubConnection.SendAsync("RequestCoaching", CurrentSession.Id, ManipulationTactic.Authority);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error requesting help");
        }
    }

    private void ToggleConversationView()
    {
        ShowConversationView = !ShowConversationView;
    }

    private string FormatElapsedTime()
    {
        if (!IsTrainingActive) return "0:00";
        
        var elapsed = DateTime.UtcNow - TrainingStartTime;
        return $"{elapsed.Minutes}:{elapsed.Seconds:D2} elapsed";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}